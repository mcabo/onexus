<?xml version="1.0" encoding="UTF-8"?>
<pmd-cpd>
<duplication lines="143" tokens="528">
<file line="31" path="/home/jordi/workspace-2013/onexus/org.onexus.ui.api/src/main/java/org/onexus/ui/api/pages/error/ExceptionErrorPage.java"/>
<file line="33" path="/home/jordi/workspace-2013/onexus/org.onexus.website.api/src/main/java/org/onexus/website/api/utils/error/ExceptionErrorPage.java"/>
<codefragment>
<![CDATA[
public class ExceptionErrorPage extends AbstractErrorPage {
    private static final long serialVersionUID = 1L;

    /**
     * Keep a reference to the root cause. WicketTester will use it
     */
    private final transient Throwable throwable;

    /**
     * Constructor.
     *
     * @param throwable The exception to show
     */
    public ExceptionErrorPage(final Throwable throwable) {
        this.throwable = throwable;

        add(new DefaultTheme());

        // Add exception label
        add(new MultiLineLabel("exception", getErrorMessage(throwable)));

        add(new MultiLineLabel("stacktrace", getStackTrace(throwable)));

    }

    /**
     * Converts a Throwable to a string.
     *
     * @param throwable The throwable
     * @return The string
     */
    public String getErrorMessage(final Throwable throwable) {
        if (throwable != null) {
            StringBuilder sb = new StringBuilder(256);

            // first print the last cause or the first onexus exception
            Throwable cause = null;
            List<Throwable> al = convertToList(throwable);
            for (Throwable e : al) {
                if (OnexusException.class.isAssignableFrom(e.getClass())) {
                    cause = e;
                    break;
                }
            }

            if (cause == null) {
                int length = al.size() - 1;
                cause = al.get(length);
            }

            sb.append(cause.getMessage());
            return sb.toString();
        } else {
            return "[Unknown]";
        }
    }

    /**
     * Converts a Throwable to a string.
     *
     * @param throwable The throwable
     * @return The string
     */
    public String getStackTrace(final Throwable throwable) {
        if (throwable != null) {
            List<Throwable> al = convertToList(throwable);

            StringBuilder sb = new StringBuilder(256);

            // first print the last cause
            int length = al.size() - 1;
            Throwable cause = al.get(length);

            outputThrowable(cause, sb, false);

            if (length > 0) {
                sb.append("\n\nComplete stack:\n\n");
                for (int i = 0; i < length; i++) {
                    outputThrowable(al.get(i), sb, true);
                    sb.append("\n");
                }
            }
            return sb.toString();
        } else {
            return "<Null Throwable>";
        }
    }

    /**
     * @param throwable
     * @return xxx
     */
    private List<Throwable> convertToList(final Throwable throwable) {
        List<Throwable> al = Generics.newArrayList();
        Throwable cause = throwable;
        al.add(cause);
        while ((cause.getCause() != null) && (cause != cause.getCause())) {
            cause = cause.getCause();
            al.add(cause);
        }
        return al;
    }

    /**
     * Outputs the throwable and its stacktrace to the stringbuffer. If stopAtWicketSerlvet is true
     * then the output will stop when the org.apache.wicket servlet is reached. sun.reflect.
     * packages are filtered out.
     *
     * @param cause
     * @param sb
     * @param stopAtWicketServlet
     */
    private void outputThrowable(Throwable cause, StringBuilder sb, boolean stopAtWicketServlet) {
        sb.append(cause);
        sb.append("\n");
        StackTraceElement[] trace = cause.getStackTrace();
        for (int i = 0; i < trace.length; i++) {
            String traceString = trace[i].toString();
            if (!(traceString.startsWith("sun.reflect.") && i > 1)) {
                sb.append("     at ");
                sb.append(traceString);
                sb.append("\n");
                if (stopAtWicketServlet &&
                        (traceString.startsWith("org.apache.wicket.protocol.http.WicketServlet") || traceString.startsWith("org.apache.wicket.protocol.http.WicketFilter"))) {
                    return;
                }
            }
        }
    }

    @Override
    protected void setHeaders(final WebResponse response) {
        response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    }

    /**
     * Get access to the exception
     *
     * @return The exception
     */
    public Throwable getThrowable() {
        return throwable;
    }
]]>
</codefragment>
</duplication>
<duplication lines="68" tokens="330">
<file line="71" path="/home/jordi/workspace-2013/onexus/org.onexus.ui.api/src/main/java/org/onexus/ui/api/OnexusWebSession.java"/>
<file line="73" path="/home/jordi/workspace-2013/onexus/org.onexus.website.api/src/main/java/org/onexus/website/api/WebsiteSession.java"/>
<codefragment>
<![CDATA[
        if (OnexusWebApplication.get().usePersonSignIn()) {
            return authenticatePersona(username);
        }

        boolean authenticated = false;
        LoginCallbackHandler handler = new LoginCallbackHandler(username, password);
        try {
            javax.security.auth.login.LoginContext javaCtx = new javax.security.auth.login.LoginContext(APPLICATION_POLICY_NAME, handler);
            javaCtx.login();
            authenticated = true;

            this.ctx = new LoginContext(username);

            Subject subject = javaCtx.getSubject();
            if (subject != null) {
                for (Principal p : subject.getPrincipals()) {
                    ctx.addRole(p.getName());
                    roles.add(p.getName());
                }
            }

        } catch (LoginException e) {
            // You'll get a LoginException on a failed username/password combo.
            authenticated = false;
        }
        return authenticated;
    }

    private boolean authenticatePersona(String username) {
        if (!Strings.isEmpty(username)) {
            this.ctx = new LoginContext(username);
            for (String role : PersonaRoles.getPersonaRoles(username)) {
                ctx.addRole(role);
                roles.add(role);
            }
            return true;
        }

        return false;
    }

    private class LoginCallbackHandler implements CallbackHandler {

        private String username;
        private String password;

        public LoginCallbackHandler(String username, String password) {
            this.username = username;
            this.password = password;
        }

        public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
            for (int i = 0; i < callbacks.length; i++) {
                Callback callback = callbacks[i];
                if (callback instanceof NameCallback) {
                    ((NameCallback) callback).setName(username);
                } else if (callback instanceof PasswordCallback) {
                    PasswordCallback pwCallback = (PasswordCallback) callback;
                    pwCallback.setPassword(password.toCharArray());
                } else {
                    throw new UnsupportedCallbackException(callbacks[i], "Callback type not supported");
                }
            }
        }
    }


}
]]>
</codefragment>
</duplication>
<duplication lines="45" tokens="290">
<file line="132" path="/home/jordi/workspace-2013/onexus/org.onexus.collection.manager/src/main/java/org/onexus/collection/manager/internal/ws/OqlServlet.java"/>
<file line="64" path="/home/jordi/workspace-2013/onexus/org.onexus.website.api/src/main/java/org/onexus/website/api/widgets/download/formats/TsvFormat.java"/>
<codefragment>
<![CDATA[
            Collection collection = resourceManager.load(Collection.class, collectionUri);

            Iterator<String> fieldId = select.getValue().iterator();
            while (fieldId.hasNext()) {
                Field field = collection.getField(fieldId.next());
                if (field == null) {
                    continue;
                }
                String label = field.getLabel();
                if (label == null) {
                    label = field.getId();
                }
                response.write(label);

                if (fieldId.hasNext() || selectIt.hasNext()) {
                    response.write("\t");
                }
            }

        }


        response.write("\n");
    }

    private static void writeRow(PrintWriter response, IEntityTable table) {

        Iterator<Map.Entry<String, List<String>>> selectIt = table.getQuery().getSelect().entrySet().iterator();
        while (selectIt.hasNext()) {
            Map.Entry<String, List<String>> select = selectIt.next();

            ORI collection = QueryUtils.getCollectionOri(table.getQuery(), select.getKey());
            IEntity entity = table.getEntity(collection);

            Iterator<String> fieldId = select.getValue().iterator();
            while (fieldId.hasNext()) {
                response.write(String.valueOf(entity.get(fieldId.next())));
                if (fieldId.hasNext() || selectIt.hasNext()) {
                    response.write("\t");
                }
            }
        }

        response.write("\n");
    }
]]>
</codefragment>
</duplication>
<duplication lines="61" tokens="253">
<file line="71" path="/home/jordi/workspace-2013/onexus/org.onexus.ui.api/src/main/java/org/onexus/ui/api/wizards/AbstractNewResourceWizard.java"/>
<file line="73" path="/home/jordi/workspace-2013/onexus/org.onexus.ui.website/src/main/java/org/onexus/ui/website/internal/wizards/AbstractNewResourceWizard.java"/>
<codefragment>
<![CDATA[
            setResponsePage(ResourcesPage.class, params);
        }

        super.onFinish();
    }

    public T getResource() {
        return resource;
    }

    public void setResource(T resource) {
        this.resource = resource;
    }

    protected ORI getParentUri() {
        return this.parentUri;
    }

    protected RequiredTextField<String> getFieldResourceName() {
        final RequiredTextField<String> resourceName = new RequiredTextField<String>("resource.label");
        resourceName.setOutputMarkupId(true);
        resourceName.add(new PatternValidator("[\\w-.\\+]*"));
        resourceName.add(new DuplicatedResourceValidator());

        resourceName.add(new AjaxFormValidatingBehavior(getForm(), "onchange") {
            @Override
            protected void updateAjaxAttributes(final AjaxRequestAttributes attributes) {
                super.updateAjaxAttributes(attributes);

                String id = "throttle-" + resourceName.getMarkupId();
                ThrottlingSettings throttlingSettings = new ThrottlingSettings(id, Duration.seconds(1));
                attributes.setThrottlingSettings(throttlingSettings);
            }
        });

        return resourceName;
    }

    public class DuplicatedResourceValidator extends Behavior implements IValidator<String> {

        @Override
        public void validate(IValidatable<String> validatable) {

            if (parentUri != null && resource != null && resource.getLabel() != null) {

                ORI resourceORI = new ORI(parentUri, validatable.getValue());

                Resource test = resourceManager.load(Resource.class, resourceORI);

                if (test != null) {
                    validatable.error(new ValidationError("duplicated-resource"));
                }


            }


        }
    }

}
]]>
</codefragment>
</duplication>
<duplication lines="61" tokens="220">
<file line="35" path="/home/jordi/workspace-2013/onexus/org.onexus.ui.api/src/main/java/org/onexus/ui/api/utils/panels/HelpMark.java"/>
<file line="35" path="/home/jordi/workspace-2013/onexus/org.onexus.website.api/src/main/java/org/onexus/website/api/utils/panels/HelpMark.java"/>
<codefragment>
<![CDATA[
public class HelpMark extends Panel {

    /**
     * @param panelId  Wicket component id.
     * @param title    Modal window title.
     * @param helpText Text to show into the modal window.
     */
    public HelpMark(final String panelId, final String title,
                    final String helpText) {
        this(panelId, title, "", helpText);
    }

    public HelpMark(final String panelId, final String title,
                    final String displayLabel, final String helpText) {
        super(panelId);

        // Add modal window
        final ModalWindow modal = new ModalWindow("modalWindowEmbeeded");
        modal.setTitle(title);
        modal.setInitialWidth(700);
        modal.setInitialHeight(500);
        add(modal);

        // Add mark label
        final WebMarkupContainer container = new WebMarkupContainer(
                "displayLabel");
        container.add(new Label("label", displayLabel));
        add(container);

        // Add question mark icon
        Image img = null;
        container.add(img = new Image("imageHelp", Icons.HELP) {

            @Override
            protected boolean shouldAddAntiCacheParameter() {
                return false;
            }

        });
        img.add(new AjaxEventBehavior("onclick") {

            @Override
            protected void onEvent(final AjaxRequestTarget target) {

                if (modal != null) {
                    modal.setInitialWidth(700);
                    modal.setInitialHeight(500);
                    modal.setContent(new HelpContentPanel(modal.getContentId(),
                            helpText));
                    modal.show(target);
                }

            }

        });

        // Visible only if there is some
        setVisible(helpText != null);

    }
}
]]>
</codefragment>
</duplication>
<duplication lines="86" tokens="197">
<file line="23" path="/home/jordi/workspace-2013/onexus/org.onexus.ui.api/src/main/java/org/onexus/ui/api/utils/panels/icons/Icons.java"/>
<file line="23" path="/home/jordi/workspace-2013/onexus/org.onexus.website.api/src/main/java/org/onexus/website/api/utils/panels/icons/Icons.java"/>
<codefragment>
<![CDATA[
public final class Icons {

    private Icons() {
        super();
    }

    /**
     * Cross icon.
     */
    public static ResourceReference CROSS = new PackageResourceReference(
            Icons.class, "cross.png");

    /**
     * Question mark icon.
     */
    public static ResourceReference HELP = new PackageResourceReference(
            Icons.class, "b_help.png");

    /**
     * Thin delete icon.
     */
    public static ResourceReference THIN_DELETE = new PackageResourceReference(
            Icons.class, "thin_delete.png");

    /**
     * Rounded informative icon (i).
     */
    public static ResourceReference INFORMATION = new PackageResourceReference(
            Icons.class, "information.png");

    /**
     * Arrow right (usually to uncollapse).
     */
    public static ResourceReference ARROW_RIGHT = new PackageResourceReference(
            Icons.class, "arrow-right.png");

    /**
     * Arrow right (usually to collapse).
     */
    public static ResourceReference ARROW_DOWN = new PackageResourceReference(
            Icons.class, "arrow-down.png");

    /**
     * Disk icon
     */
    public static ResourceReference DISK = new PackageResourceReference(
            Icons.class, "disk.png");

    /**
     * Add icon
     */
    public static ResourceReference ADDITION = new PackageResourceReference(Icons.class, "addition.png");

    /**
     * Edit page
     */
    public static ResourceReference EDIT_PAGE = new PackageResourceReference(Icons.class, "page-white_edit.png");


    /**
     * Eye icon
     */
    public static ResourceReference EYE = new PackageResourceReference(
            Icons.class, "eye.png");


    /**
     * Dark eye icon
     */
    public static ResourceReference EYE_DARK = new PackageResourceReference(
            Icons.class, "eye-dark.png");

    /**
     * Done mark
     */
    public static ResourceReference DONE = new PackageResourceReference(
            Icons.class, "done.gif");

    /**
     * Loading icon
     */
    public static ResourceReference LOADING = new PackageResourceReference(
            Icons.class, "loading.gif");


}
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="132">
<file line="224" path="/home/jordi/workspace-2013/onexus/org.onexus.resource.manager/src/main/java/org/onexus/resource/manager/internal/ws/git/GitSecurityFilter.java"/>
<file line="110" path="/home/jordi/workspace-2013/onexus/org.onexus.ui.api/src/main/java/org/onexus/ui/api/OnexusWebSession.java"/>
<file line="112" path="/home/jordi/workspace-2013/onexus/org.onexus.website.api/src/main/java/org/onexus/website/api/WebsiteSession.java"/>
<codefragment>
<![CDATA[
    }

    private class LoginCallbackHandler implements CallbackHandler {

        private String username;
        private String password;

        public LoginCallbackHandler(String username, String password) {
            this.username = username;
            this.password = password;
        }

        public void handle(Callback[] callbacks) throws IOException, UnsupportedCallbackException {
            for (int i = 0; i < callbacks.length; i++) {
                Callback callback = callbacks[i];
                if (callback instanceof NameCallback) {
                    ((NameCallback) callback).setName(username);
                } else if (callback instanceof PasswordCallback) {
                    PasswordCallback pwCallback = (PasswordCallback) callback;
                    pwCallback.setPassword(password.toCharArray());
                } else {
                    throw new UnsupportedCallbackException(callbacks[i], "Callback type not supported");
                }
            }
        }
    }
]]>
</codefragment>
</duplication>
<duplication lines="16" tokens="130">
<file line="82" path="/home/jordi/workspace-2013/onexus/org.onexus.website.api/src/main/java/org/onexus/website/api/widgets/download/formats/ExcelFormat.java"/>
<file line="60" path="/home/jordi/workspace-2013/onexus/org.onexus.website.api/src/main/java/org/onexus/website/api/widgets/download/formats/TsvFormat.java"/>
<codefragment>
<![CDATA[
        while (selectIt.hasNext()) {
            Map.Entry<String, List<String>> select = selectIt.next();

            ORI collectionUri = QueryUtils.getCollectionOri(table.getQuery(), select.getKey());
            Collection collection = getResourceManager().load(Collection.class, collectionUri);

            Iterator<String> fieldId = select.getValue().iterator();
            while (fieldId.hasNext()) {
                Field field = collection.getField(fieldId.next());
                if (field == null) {
                    continue;
                }
                String label = field.getLabel();
                if (label == null) {
                    label = field.getId();
                }
]]>
</codefragment>
</duplication>
<duplication lines="35" tokens="126">
<file line="59" path="/home/jordi/workspace-2013/onexus/org.onexus.ui.api/src/main/java/org/onexus/ui/api/wizards/AbstractWizard.java"/>
<file line="60" path="/home/jordi/workspace-2013/onexus/org.onexus.ui.website/src/main/java/org/onexus/ui/website/internal/wizards/AbstractWizard.java"/>
<codefragment>
<![CDATA[
    protected Form<AbstractWizard> newForm(String id) {

        Form<AbstractWizard> form = new Form<AbstractWizard>(id, new CompoundPropertyModel<AbstractWizard>(this));
        form.setOutputMarkupId(true);

        return form;

    }


    /**
     * This is a hack, because we expect that the finish button is enabled only
     * if the last step is completed. By default, finish button is always
     * enabled on the last step.
     *
     * @author Jordi Deu-Pons
     */
    public final static class MyWizardButtonBar extends WizardButtonBar implements IDefaultButtonProvider {

        public MyWizardButtonBar(String id, IWizard wizard) {
            super(id, wizard);
            replace(new FinishButton("finish", wizard) {

                @Override
                public boolean isEnabled() {
                    IWizardStep activeStep = getWizardModel().getActiveStep();
                    return ((activeStep != null) && getWizardModel().isLastStep(activeStep) && activeStep.isComplete());
                }

            });
        }

    }

}
]]>
</codefragment>
</duplication>
<duplication lines="26" tokens="120">
<file line="90" path="/home/jordi/workspace-2013/onexus/org.onexus.ui.api/src/main/java/org/onexus/ui/api/pages/resource/ResourcesPage.java"/>
<file line="127" path="/home/jordi/workspace-2013/onexus/org.onexus.ui.api/src/main/java/org/onexus/ui/api/pages/resource/ResourcesPage.java"/>
<codefragment>
<![CDATA[
                getResourceManager().syncProject(resourceUri.getProjectUrl());

                Resource newVersion = getResourceManager().load(Resource.class, resourceUri);
                if (newVersion == null) {
                    resourceUri = resourceUri.getParent();

                    newVersion = getResourceManager().load(Resource.class, resourceUri);
                    if (newVersion == null) {
                        resourceUri = new ORI(resourceUri.getProjectUrl(), null);
                    }
                }

                PageParameters parameters = new PageParameters();
                parameters.set(ResourcesPage.PARAMETER_RESOURCE, resourceUri);

                setResponsePage(ResourcesPage.class, parameters);
            }
        }

        @Override
        public boolean isVisible() {
            return ResourcesPage.this.getModelObject() != null;
        }
    }

    public class ToolProjectUpdate extends Link<Resource> {
]]>
</codefragment>
</duplication>
<duplication lines="19" tokens="109">
<file line="110" path="/home/jordi/workspace-2013/onexus/org.onexus.website.api/src/main/java/org/onexus/website/api/pages/browser/BrowserPage.java"/>
<file line="136" path="/home/jordi/workspace-2013/onexus/org.onexus.website.api/src/main/java/org/onexus/website/api/pages/browser/BrowserPage.java"/>
<codefragment>
<![CDATA[
                            TabConfig tab = item.getModelObject();


                            BrowserPageLink<String> link = new BrowserPageLink<String>("link", Model.of(tab.getId())) {

                                @Override
                                public void onClick(AjaxRequestTarget target) {
                                    getStatus().setCurrentTabId(getModelObject());
                                    sendEvent(EventTabSelected.EVENT);
                                }

                            };

                            link.add(new Label("label", tab.getTitle()));
                            item.add(link);

                            if (isCurrentTab(tab.getId())) {
                                item.add(new AttributeModifier("class", new Model<String>("active")));
                            }
]]>
</codefragment>
</duplication>
</pmd-cpd>